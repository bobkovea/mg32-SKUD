<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TMC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TMC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Jun 26 17:36:32 2023
<BR><P>
<H3>Maximum Stack Usage =        372 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TM1x_IRQHandler &rArr; TIM16_Callback &rArr; API_IsRawKeyValid &rArr; MD5_MakeHash &rArr; MD5_Final &rArr; body
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">NMI_Handler</a><BR>
 <LI><a href="#[d]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SVC_Handler</a><BR>
 <LI><a href="#[e]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">PendSV_Handler</a><BR>
 <LI><a href="#[f]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">SysTick_Handler</a><BR>
 <LI><a href="#[18]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[28]">APX_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[16]">COMP_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[19]">DAC_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[17]">DMA_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[12]">EXINT0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[13]">EXINT1_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[14]">EXINT2_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[15]">EXINT3_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[2c]">HardFault_Handler_C</a> from system_mg32x02z.o(.text.HardFault_Handler_C) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[25]">I2C0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[26]">I2Cx_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[a]">MG32x02z_IEC60730_MANAGER</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[e]">PendSV_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[23]">SPI0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[24]">SPIx_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[11]">SYS_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[f]">SysTick_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[2a]">SystemInit</a> from system_mg32x02z.o(.text.SystemInit) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[1a]">TM0x_IRQHandler</a> from timers.o(.text.TM0x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1b]">TM10_IRQHandler</a> from timers.o(.text.TM10_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1c]">TM1x_IRQHandler</a> from timers.o(.text.TM1x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1d]">TM20_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1e]">TM2x_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1f]">TM3x_IRQHandler</a> from timers.o(.text.TM3x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[20]">URT0_IRQHandler</a> from usart.o(.text.URT0_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[21]">URT123_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[22]">URT4x_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[27]">USB_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[10]">WWDT_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[2b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[2d]">fputc</a> from fputc.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[8]">hAccessToSleep</a> from skud_algo.o(.text.hAccessToSleep) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[6]">hDoorClosedNoAccess</a> from skud_algo.o(.text.hDoorClosedNoAccess) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[2]">hDoorOpenedNoAccess</a> from skud_algo.o(.text.hDoorOpenedNoAccess) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[9]">hIndicationStop</a> from skud_algo.o(.text.hIndicationStop) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[1]">hParseBusMessage</a> from skud_algo.o(.text.hParseBusMessage) referenced 6 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[7]">hReadingKeyResume</a> from skud_algo.o(.text.hReadingKeyResume) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[4]">hReadingKeySuspend</a> from skud_algo.o(.text.hReadingKeySuspend) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[5]">hSendAlarmEvent</a> from skud_algo.o(.text.hSendAlarmEvent) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[0]">hSleepToWaiting</a> from skud_algo.o(.text.hSleepToWaiting) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[3]">hWaitingToAccess</a> from skud_algo.o(.text.hWaitingToAccess) referenced 2 times from skud_algo.o(.data.FSMTable)
 <LI><a href="#[29]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[30]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[38]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[91]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[92]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[93]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[94]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>MG32x02z_IEC60730_MANAGER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ReInitial_Stack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[2f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>APX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2Cx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPIx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SYS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TM20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TM2x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>URT123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>URT4x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_MakeHash
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyKeyByIndex
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddKey
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddKey
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DoCommand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ActivateKey
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_MakeHash
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[46]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IsRawKeyValid
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[9d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>API_ActivateKey</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, api.o(.text.API_ActivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_ActivateKey &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Multiple_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_Page
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashResource
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest9
</UL>

<P><STRONG><a name="[3e]"></a>API_AddKey</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, api.o(.text.API_AddKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = API_AddKey &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Multiple_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_Page
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashResource
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest24
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
</UL>

<P><STRONG><a name="[40]"></a>API_CopyKeyByIndex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, api.o(.text.API_CopyKeyByIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_CopyKeyByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
</UL>

<P><STRONG><a name="[53]"></a>API_CopyVariable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, api.o(.text.API_CopyVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_CopyVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
</UL>

<P><STRONG><a name="[54]"></a>API_CopyVariablePack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, api.o(.text.API_CopyVariablePack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = API_CopyVariablePack
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
</UL>

<P><STRONG><a name="[41]"></a>API_CopyVariablesPage0ToFlash</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, flash.o(.text.API_CopyVariablesPage0ToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_CopyVariablesPage0ToFlash &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Single_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetVariablePack
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetVariable
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hAccessToSleep
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hWaitingToAccess
</UL>

<P><STRONG><a name="[43]"></a>API_DoCommand</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, api.o(.text.API_DoCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = API_DoCommand &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Multiple_Write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_Page
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFlashResource
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest9
</UL>

<P><STRONG><a name="[44]"></a>API_IsRawKeyValid</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, api.o(.text.API_IsRawKeyValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = API_IsRawKeyValid &rArr; MD5_MakeHash &rArr; MD5_Final &rArr; body
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_MakeHash
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
</UL>

<P><STRONG><a name="[47]"></a>API_SetVariable</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, api.o(.text.API_SetVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = API_SetVariable &rArr; API_CopyVariablesPage0ToFlash &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablesPage0ToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest9
</UL>

<P><STRONG><a name="[48]"></a>API_SetVariablePack</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, api.o(.text.API_SetVariablePack))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = API_SetVariablePack &rArr; API_CopyVariablesPage0ToFlash &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablesPage0ToFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest24
</UL>

<P><STRONG><a name="[49]"></a>Bus_AddNewByte</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bus.o(.text.Bus_AddNewByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Bus_AddNewByte &rArr; putEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_GetRXData
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Rx_Callback
</UL>

<P><STRONG><a name="[72]"></a>Bus_ClearBuffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bus.o(.text.Bus_ClearBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM00_Callback
</UL>

<P><STRONG><a name="[4c]"></a>Bus_ParseMessage</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bus.o(.text.Bus_ParseMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Bus_ParseMessage &rArr; Bus_ParseWriteRequest24 &rArr; API_AddKey &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_SetTXData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest24
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest9
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hParseBusMessage
</UL>

<P><STRONG><a name="[4e]"></a>Bus_ParseReadRequest</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, bus.o(.text.Bus_ParseReadRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Bus_ParseReadRequest &rArr; API_CopyVariablesPage0ToFlash &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ReturnReply
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCisWrong
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_SetTXData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablePack
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablesPage0ToFlash
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseMessage
</UL>

<P><STRONG><a name="[4f]"></a>Bus_ParseWriteRequest24</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, bus.o(.text.Bus_ParseWriteRequest24))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bus_ParseWriteRequest24 &rArr; API_AddKey &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCisWrong
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_SetTXData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddKey
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetVariablePack
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseMessage
</UL>

<P><STRONG><a name="[4d]"></a>Bus_ParseWriteRequest9</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, bus.o(.text.Bus_ParseWriteRequest9))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Bus_ParseWriteRequest9 &rArr; API_SetVariable &rArr; API_CopyVariablesPage0ToFlash &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCisWrong
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_SetTXData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DoCommand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ActivateKey
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_SetVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseMessage
</UL>

<P><STRONG><a name="[55]"></a>Bus_ReturnReply</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bus.o(.text.Bus_ReturnReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Bus_ReturnReply &rArr; Do_CRC
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_SetTXData
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
</UL>

<P><STRONG><a name="[52]"></a>CRCisWrong</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, crc.o(.text.CRCisWrong))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRCisWrong
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest24
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest9
</UL>

<P><STRONG><a name="[87]"></a>CSC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>CSC_GetClockSourceState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_GetClockSourceState))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>CSC_IHRCO_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_IHRCO_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>CSC_Init</STRONG> (Thumb, 600 bytes, Stack size 72 bytes, mg32x02z_csc_init.o(.text.CSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[56]"></a>ChipInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mg32x02z_chipinit.o(.text.ChipInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ChipInit &rArr; CSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>DS1990A_GetKeyID</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ibutton.o(.text.DS1990A_GetKeyID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DS1990A_GetKeyID &rArr; OneWire_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
</UL>

<P><STRONG><a name="[5c]"></a>DefineInitialState</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, skud_algo.o(.text.DefineInitialState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DefineInitialState
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
</UL>

<P><STRONG><a name="[50]"></a>Do_CRC</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc.o(.text.Do_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ReturnReply
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest24
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest9
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseMessage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_Config</STRONG> (Thumb, 628 bytes, Stack size 32 bytes, gpio.o(.text.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction_Select
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinPUResister_Cmd
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInFilterDivider_Select
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutputDrive_Select
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInverse_Cmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHighSpeedMode_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>GPIO_PinFunction_Select</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinFunction_Select))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[61]"></a>GPIO_PinHighSpeedMode_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinHighSpeedMode_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[64]"></a>GPIO_PinInFilterDivider_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinInFilterDivider_Select))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[62]"></a>GPIO_PinInverse_Cmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinInverse_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_PinMode_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinMode_Select))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_SetDirection
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[63]"></a>GPIO_PinOutputDrive_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinOutputDrive_Select))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[60]"></a>GPIO_PinPUResister_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinPUResister_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[66]"></a>HandleEvent</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, skud_algo.o(.text.HandleEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HandleEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>HardFault_Handler_C</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, system_mg32x02z.o(.text.HardFault_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler_C &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>IAP_Erase_Page</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, iap.o(.text.IAP_Erase_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddKey
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DoCommand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ActivateKey
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablesPage0ToFlash
</UL>

<P><STRONG><a name="[3d]"></a>IAP_Multiple_Write</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, iap.o(.text.IAP_Multiple_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_Multiple_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddKey
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DoCommand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ActivateKey
</UL>

<P><STRONG><a name="[42]"></a>IAP_Single_Write</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, iap.o(.text.IAP_Single_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IAP_Single_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablesPage0ToFlash
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
</UL>

<P><STRONG><a name="[8c]"></a>IWDT_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
</UL>

<P><STRONG><a name="[8b]"></a>IWDT_Divider_Select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_Divider_Select))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
</UL>

<P><STRONG><a name="[8a]"></a>IWDT_RefreshCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>MD5_Final</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, md5.o(.text.MD5_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = MD5_Final &rArr; body
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_MakeHash
</UL>

<P><STRONG><a name="[45]"></a>MD5_MakeHash</STRONG> (Thumb, 108 bytes, Stack size 176 bytes, md5.o(.text.MD5_MakeHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = MD5_MakeHash &rArr; MD5_Final &rArr; body
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IsRawKeyValid
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
</UL>

<P><STRONG><a name="[6c]"></a>MEM_SetIAPSize</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mg32x02z_mem_drv.o(.text.MEM_SetIAPSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MEM_SetIAPSize
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>OneWire_Read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, onewire.o(.text.OneWire_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OneWire_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[6f]"></a>OneWire_SetDirection</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, onewire.o(.text.OneWire_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OneWire_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hDoorClosedNoAccess
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hReadingKeySuspend
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hWaitingToAccess
</UL>

<P><STRONG><a name="[59]"></a>OneWire_Start</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, onewire.o(.text.OneWire_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OneWire_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[5a]"></a>OneWire_Write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, onewire.o(.text.OneWire_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OneWire_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[70]"></a>PowerOnHandle</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, flash.o(.text.PowerOnHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = PowerOnHandle &rArr; MD5_MakeHash &rArr; MD5_Final &rArr; body
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Single_Write
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_MakeHash
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyKeyByIndex
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddKey
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefineInitialState
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>ProtectModuleReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z__common_drv.o(.text.ProtectModuleReg))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>RST_CRstSource_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_rst_drv.o(.text.RST_CRstSource_Config))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
</UL>

<P><STRONG><a name="[2a]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_mg32x02z.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[71]"></a>TIM00_Callback</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, isr.o(.text.TIM00_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM00_Callback &rArr; putEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ClearBuffer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM0x_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>TIM01_Callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, isr.o(.text.TIM01_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM01_Callback &rArr; putEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEvent
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM0x_IRQHandler
</UL>

<P><STRONG><a name="[7d]"></a>TIM10_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.TIM10_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQHandler
</UL>

<P><STRONG><a name="[74]"></a>TIM16_Callback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, isr.o(.text.TIM16_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = TIM16_Callback &rArr; API_IsRawKeyValid &rArr; MD5_MakeHash &rArr; MD5_Final &rArr; body
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_IsRawKeyValid
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEvent
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1x_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>TIM36_Callback</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, isr.o(.text.TIM36_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM36_Callback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEvent
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM3x_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>TIM_Config</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, timers.o(.text.TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_Config &rArr; TM_TimeBase_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ITEA_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IT_Config
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseStruct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>TM0x_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, timers.o(.text.TM0x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM0x_IRQHandler &rArr; TIM01_Callback &rArr; putEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM01_Callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM00_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TM10_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text.TM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TM1x_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timers.o(.text.TM1x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = TM1x_IRQHandler &rArr; TIM16_Callback &rArr; API_IsRawKeyValid &rArr; MD5_MakeHash &rArr; MD5_Final &rArr; body
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TM3x_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timers.o(.text.TM3x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TM3x_IRQHandler &rArr; TIM36_Callback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TM_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM3x_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1x_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM0x_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>TM_ITEA_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_ITEA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[7a]"></a>TM_IT_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_IT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[78]"></a>TM_TimeBaseStruct_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_TimeBaseStruct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[79]"></a>TM_TimeBase_Init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, mg32x02z_tm_drv.o(.text.TM_TimeBase_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_TimeBase_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[5d]"></a>TM_Timer_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_Timer_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hDoorOpenedNoAccess
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hDoorClosedNoAccess
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hReadingKeyResume
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hReadingKeySuspend
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hWaitingToAccess
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hSleepToWaiting
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DefineInitialState
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM01_Callback
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>URT0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text.URT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = URT0_IRQHandler &rArr; URT_Rx_Callback &rArr; Bus_AddNewByte &rArr; putEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ClearITFlag
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Rx_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>URT_ClearITFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_ClearITFlag))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>URT_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>URT_GetRXData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_GetRXData))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_AddNewByte
</UL>

<P><STRONG><a name="[82]"></a>URT_ITEA_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_ITEA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[81]"></a>URT_IT_Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_IT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[7e]"></a>URT_Rx_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(.text.URT_Rx_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = URT_Rx_Callback &rArr; Bus_AddNewByte &rArr; putEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_AddNewByte
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>URT_SetTXData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_SetTXData))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ReturnReply
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest24
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseReadRequest
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseWriteRequest9
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseMessage
</UL>

<P><STRONG><a name="[80]"></a>USART_Config</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, usart.o(.text.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ITEA_Cmd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>UnProtectModuleReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z__common_drv.o(.text.UnProtectModuleReg))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>UpdateFlashResource</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, flash.o(.text.UpdateFlashResource))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_AddKey
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_DoCommand
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_ActivateKey
</UL>

<P><STRONG><a name="[83]"></a>WDT_Config</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wdt.o(.text.WDT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CRstSource_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>body</STRONG> (Thumb, 2112 bytes, Stack size 132 bytes, md5.o(.text.body))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = body
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_Final
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5_MakeHash
</UL>

<P><STRONG><a name="[67]"></a>getEvent</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ring_buffer.o(.text.getEvent))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEvent
</UL>

<P><STRONG><a name="[8]"></a>hAccessToSleep</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, skud_algo.o(.text.hAccessToSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hAccessToSleep &rArr; API_CopyVariablesPage0ToFlash &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablesPage0ToFlash
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[6]"></a>hDoorClosedNoAccess</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, skud_algo.o(.text.hDoorClosedNoAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hDoorClosedNoAccess &rArr; OneWire_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_SetDirection
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[2]"></a>hDoorOpenedNoAccess</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, skud_algo.o(.text.hDoorOpenedNoAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hDoorOpenedNoAccess
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[9]"></a>hIndicationStop</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, skud_algo.o(.text.hIndicationStop))
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[1]"></a>hParseBusMessage</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, skud_algo.o(.text.hParseBusMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hParseBusMessage &rArr; Bus_ParseMessage &rArr; Bus_ParseWriteRequest24 &rArr; API_AddKey &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_ParseMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[7]"></a>hReadingKeyResume</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, skud_algo.o(.text.hReadingKeyResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hReadingKeyResume
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[4]"></a>hReadingKeySuspend</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, skud_algo.o(.text.hReadingKeySuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hReadingKeySuspend &rArr; OneWire_SetDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_SetDirection
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[5]"></a>hSendAlarmEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, skud_algo.o(.text.hSendAlarmEvent))
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[0]"></a>hSleepToWaiting</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, skud_algo.o(.text.hSleepToWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hSleepToWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[3]"></a>hWaitingToAccess</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, skud_algo.o(.text.hWaitingToAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = hWaitingToAccess &rArr; API_CopyVariablesPage0ToFlash &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_CopyVariablesPage0ToFlash
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_SetDirection
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> skud_algo.o(.data.FSMTable)
</UL>
<P><STRONG><a name="[29]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = main &rArr; PowerOnHandle &rArr; MD5_MakeHash &rArr; MD5_Final &rArr; body
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_RefreshCounter
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleEvent
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnHandle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_ClearFlag
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_GetClockSourceState
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_IHRCO_Cmd
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4b]"></a>putEvent</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ring_buffer.o(.text.putEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = putEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hAccessToSleep
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM01_Callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM00_Callback
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_AddNewByte
</UL>

<P><STRONG><a name="[89]"></a>wdt_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wdt.o(.text.wdt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Cmd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Divider_Select
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a1]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[68]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2d]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8e]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
