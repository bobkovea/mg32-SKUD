<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\TMC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\TMC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140101: Last Updated: Fri Dec 23 17:24:37 2022
<BR><P>
<H3>Maximum Stack Usage =        124 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TM0x_IRQHandler &rArr; PRSM3_ParseMessage &rArr; PRSM3_ParseWriteRequest24 &rArr; AddKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1e]">APX_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[c]">COMP_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[f]">DAC_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[d]">DMA_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[8]">EXINT0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[9]">EXINT1_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[a]">EXINT2_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[b]">EXINT3_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[22]">HardFault_Handler_C</a> from system_mg32x02z.o(.text.HardFault_Handler_C) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[1b]">I2C0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1c]">I2Cx_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[0]">MG32x02z_IEC60730_MANAGER</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[19]">SPI0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1a]">SPIx_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[7]">SYS_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_mg32x02z.o(.text.SystemInit) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[10]">TM0x_IRQHandler</a> from timers.o(.text.TM0x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[11]">TM10_IRQHandler</a> from timers.o(.text.TM10_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[12]">TM1x_IRQHandler</a> from timers.o(.text.TM1x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[13]">TM20_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[14]">TM2x_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[15]">TM3x_IRQHandler</a> from timers.o(.text.TM3x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[16]">URT0_IRQHandler</a> from usart.o(.text.URT0_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[17]">URT123_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[18]">URT4x_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1d]">USB_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[6]">WWDT_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[23]">fputc</a> from fputc.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[1f]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[26]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[7e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[7f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[80]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[81]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>MG32x02z_IEC60730_MANAGER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ReInitial_Stack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>APX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2Cx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPIx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SYS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TM20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TM2x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>URT123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>URT4x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM3x_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyFromIAPToRAM
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_IsEqualToRAM
</UL>

<P><STRONG><a name="[28]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[86]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[88]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>ActivateKey</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, flash.o(.text.ActivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ActivateKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteMultipleWord
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadByte
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyFromIAPToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
</UL>

<P><STRONG><a name="[32]"></a>AddKey</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, flash.o(.text.AddKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = AddKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteMultipleWord
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadByte
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyFromIAPToRAM
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest24
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTestFill
</UL>

<P><STRONG><a name="[4e]"></a>CSC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[4d]"></a>CSC_GetClockSourceState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_GetClockSourceState))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[4c]"></a>CSC_IHRCO_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_IHRCO_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[35]"></a>CSC_Init</STRONG> (Thumb, 592 bytes, Stack size 64 bytes, mg32x02z_csc_init.o(.text.CSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[34]"></a>ChipInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mg32x02z_chipinit.o(.text.ChipInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ChipInit &rArr; CSC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>DS1990A_GetKeyID</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ibutton.o(.text.DS1990A_GetKeyID))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DS1990A_GetKeyID &rArr; OneWire_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1x_IRQHandler
</UL>

<P><STRONG><a name="[3c]"></a>DoCommand</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, flash.o(.text.DoCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DoCommand &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteMultipleWord
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyFromIAPToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
</UL>

<P><STRONG><a name="[3b]"></a>Do_CRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crc.o(.text.Do_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest24
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseReadRequest
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[3d]"></a>FlashFirstInit</STRONG> (Thumb, 712 bytes, Stack size 24 bytes, flash.o(.text.FlashFirstInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FlashFirstInit &rArr; IAP_Init &rArr; MEM_SetIAPSize
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteSingleWord
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>FlashTestFill</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, flash.o(.text.FlashTestFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = FlashTestFill &rArr; AddKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>GPIO_Config</STRONG> (Thumb, 640 bytes, Stack size 32 bytes, gpio.o(.text.GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinPUResister_Cmd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinOutputDrive_Select
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInverse_Cmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinInFilterDivider_Select
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinHighSpeedMode_Cmd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinFunction_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>GPIO_PinFunction_Select</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinFunction_Select))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[44]"></a>GPIO_PinHighSpeedMode_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinHighSpeedMode_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[47]"></a>GPIO_PinInFilterDivider_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinInFilterDivider_Select))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[45]"></a>GPIO_PinInverse_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinInverse_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[42]"></a>GPIO_PinMode_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinMode_Select))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
</UL>

<P><STRONG><a name="[46]"></a>GPIO_PinOutputDrive_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinOutputDrive_Select))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[43]"></a>GPIO_PinPUResister_Cmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinPUResister_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
</UL>

<P><STRONG><a name="[49]"></a>GetKeyStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, flash.o(.text.GetKeyStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetKeyStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyActive
</UL>

<P><STRONG><a name="[60]"></a>GetVariable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, flash.o(.text.GetVariable))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseReadRequest
</UL>

<P><STRONG><a name="[22]"></a>HardFault_Handler_C</STRONG> (Thumb, 276 bytes, Stack size 0 bytes, system_mg32x02z.o(.text.HardFault_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler_C &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>IAP_CopyFromIAPToRAM</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iap.o(.text.IAP_CopyFromIAPToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_CopyFromIAPToRAM
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariablePack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateKey
</UL>

<P><STRONG><a name="[30]"></a>IAP_Erase_OnePage</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, iap.o(.text.IAP_Erase_OnePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IAP_Erase_OnePage
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariablePack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateKey
</UL>

<P><STRONG><a name="[3e]"></a>IAP_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iap.o(.text.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IAP_Init &rArr; MEM_SetIAPSize
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_IHRCO_Cmd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_GetClockSourceState
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFirstInit
</UL>

<P><STRONG><a name="[51]"></a>IAP_IsEqualToRAM</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, iap.o(.text.IAP_IsEqualToRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IAP_IsEqualToRAM &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyActive
</UL>

<P><STRONG><a name="[53]"></a>IAP_Multiple_Write</STRONG> (Thumb, 196 bytes, Stack size 28 bytes, iap.o(.text.IAP_Multiple_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IAP_Multiple_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteMultipleWord
</UL>

<P><STRONG><a name="[2d]"></a>IAP_ReadByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iap.o(.text.IAP_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateKey
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
</UL>

<P><STRONG><a name="[2f]"></a>IAP_ReadWord</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, iap.o(.text.IAP_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariablePack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateKey
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFirstInit
</UL>

<P><STRONG><a name="[31]"></a>IAP_WriteMultipleWord</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap.o(.text.IAP_WriteMultipleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Multiple_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariablePack
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateKey
</UL>

<P><STRONG><a name="[3f]"></a>IAP_WriteSingleWord</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, iap.o(.text.IAP_WriteSingleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_WriteSingleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFirstInit
</UL>

<P><STRONG><a name="[78]"></a>IWDT_Cmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
</UL>

<P><STRONG><a name="[77]"></a>IWDT_Divider_Select</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_Divider_Select))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
</UL>

<P><STRONG><a name="[79]"></a>IWDT_RefreshCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_RefreshCounter))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset
</UL>

<P><STRONG><a name="[54]"></a>IsKeyActive</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, skud_algo.o(.text.IsKeyActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = IsKeyActive &rArr; IAP_IsEqualToRAM &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyStatus
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_IsEqualToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1x_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>MEM_SetIAPSize</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, mg32x02z_mem_drv.o(.text.MEM_SetIAPSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MEM_SetIAPSize
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[3a]"></a>OneWire_Read</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, onewire.o(.text.OneWire_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OneWire_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[37]"></a>OneWire_Start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, onewire.o(.text.OneWire_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OneWire_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[39]"></a>OneWire_Write</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, onewire.o(.text.OneWire_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OneWire_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[56]"></a>PRSM3_AddNewByte</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, prsm3.o(.text.PRSM3_AddNewByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PRSM3_AddNewByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_GetRXData
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>PRSM3_ParseMessage</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, prsm3.o(.text.PRSM3_ParseMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = PRSM3_ParseMessage &rArr; PRSM3_ParseWriteRequest24 &rArr; AddKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IsTxEndTransmission
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest24
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseReadRequest
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM0x_IRQHandler
</UL>

<P><STRONG><a name="[5b]"></a>PRSM3_ParseReadRequest</STRONG> (Thumb, 912 bytes, Stack size 24 bytes, prsm3.o(.text.PRSM3_ParseReadRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PRSM3_ParseReadRequest &rArr; wdt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IsTxEndTransmission
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVariable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
</UL>

<P><STRONG><a name="[5c]"></a>PRSM3_ParseWriteRequest24</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, prsm3.o(.text.PRSM3_ParseWriteRequest24))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = PRSM3_ParseWriteRequest24 &rArr; AddKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IsTxEndTransmission
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariablePack
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
</UL>

<P><STRONG><a name="[5a]"></a>PRSM3_ParseWriteRequest9</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, prsm3.o(.text.PRSM3_ParseWriteRequest9))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PRSM3_ParseWriteRequest9 &rArr; SetVariable &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IsTxEndTransmission
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariable
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoCommand
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivateKey
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
</UL>

<P><STRONG><a name="[6a]"></a>PRSM3_clearBuffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, prsm3.o(.text.PRSM3_clearBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>ProtectModuleReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z__common_drv.o(.text.ProtectModuleReg))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[74]"></a>RST_CRstSource_Config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_rst_drv.o(.text.RST_CRstSource_Config))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
</UL>

<P><STRONG><a name="[62]"></a>SetVariable</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, flash.o(.text.SetVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetVariable &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteMultipleWord
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyFromIAPToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
</UL>

<P><STRONG><a name="[61]"></a>SetVariablePack</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, flash.o(.text.SetVariablePack))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetVariablePack &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_WriteMultipleWord
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyFromIAPToRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest24
</UL>

<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_mg32x02z.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>TIM_Config</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, timers.o(.text.TIM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM_Config &rArr; TM_TimeBase_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBase_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_TimeBaseStruct_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IT_Config
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ITEA_Cmd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>TM0x_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, timers.o(.text.TM0x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = TM0x_IRQHandler &rArr; PRSM3_ParseMessage &rArr; PRSM3_ParseWriteRequest24 &rArr; AddKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TM10_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, timers.o(.text.TM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TM10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_clearBuffer
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TM1x_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timers.o(.text.TM1x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1x_IRQHandler &rArr; DS1990A_GetKeyID &rArr; OneWire_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyActive
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TM3x_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, timers.o(.text.TM3x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TM3x_IRQHandler &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TM_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM3x_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1x_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM0x_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>TM_GetSingleFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_GetSingleFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM3x_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1x_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM0x_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>TM_ITEA_Cmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_ITEA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[67]"></a>TM_IT_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_IT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[64]"></a>TM_TimeBaseStruct_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_TimeBaseStruct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[65]"></a>TM_TimeBase_Init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, mg32x02z_tm_drv.o(.text.TM_TimeBase_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_TimeBase_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
</UL>

<P><STRONG><a name="[58]"></a>TM_Timer_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_Timer_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_AddNewByte
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM3x_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>URT0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, usart.o(.text.URT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = URT0_IRQHandler &rArr; PRSM3_AddNewByte
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_AddNewByte
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_GetITStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_GetITAllFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ClearITFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>URT_ClearITFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_ClearITFlag))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>URT_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>URT_GetITAllFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_GetITAllFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>URT_GetITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>URT_GetRXData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_GetRXData))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_AddNewByte
</UL>

<P><STRONG><a name="[72]"></a>URT_ITEA_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_ITEA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[71]"></a>URT_IT_Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_IT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[5f]"></a>URT_IsTxEndTransmission</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.URT_IsTxEndTransmission))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest24
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseReadRequest
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
</UL>

<P><STRONG><a name="[6f]"></a>URT_SetTXData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_SetTXData))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
</UL>

<P><STRONG><a name="[5e]"></a>URT_Write</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart.o(.text.URT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = URT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_SetTXData
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest24
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseReadRequest
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
</UL>

<P><STRONG><a name="[70]"></a>USART_Config</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, usart.o(.text.USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IT_Config
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ITEA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>UnProtectModuleReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z__common_drv.o(.text.UnProtectModuleReg))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[73]"></a>WDT_Config</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wdt.o(.text.WDT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WDT_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_CRstSource_Config
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38]"></a>delay_ms</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timers.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetKeyID
</UL>

<P><STRONG><a name="[55]"></a>delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timers.o(.text.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = main &rArr; FlashTestFill &rArr; AddKey &rArr; IAP_WriteMultipleWord &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Config
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Cmd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Config
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Config
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashTestFill
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashFirstInit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5d]"></a>wdt_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wdt.o(.text.wdt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Divider_Select
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest9
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseWriteRequest24
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseReadRequest
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3_ParseMessage
</UL>

<P><STRONG><a name="[76]"></a>wdt_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wdt.o(.text.wdt_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wdt_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_RefreshCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[4a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[8b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[8c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[23]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7b]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
