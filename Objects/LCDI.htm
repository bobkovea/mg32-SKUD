<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LCDI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LCDI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140101: Last Updated: Mon Oct 10 23:48:52 2022
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TM0x_IRQHandler &rArr; TM01_IRQ &rArr; TIM01_Callback &rArr; PRSM3ReceiveLineComplete &rArr; RemoveKey &rArr; CheckTruth &rArr; IAP_ReadWord
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[e]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[e]">ADC_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1e]">APX_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[c]">COMP_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[f]">DAC_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[d]">DMA_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[8]">EXINT0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[9]">EXINT1_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[a]">EXINT2_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[b]">EXINT3_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[22]">HardFault_Handler_C</a> from system_mg32x02z.o(.text.HardFault_Handler_C) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[1b]">I2C0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1c]">I2Cx_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[0]">MG32x02z_IEC60730_MANAGER</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from mg32x02z__irqhandler.o(.text.NMI_Handler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from mg32x02z__irqhandler.o(.text.PendSV_Handler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[19]">SPI0_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1a]">SPIx_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from mg32x02z__irqhandler.o(.text.SVC_Handler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[7]">SYS_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from mg32x02z__irqhandler.o(.text.SysTick_Handler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[20]">SystemInit</a> from system_mg32x02z.o(.text.SystemInit) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[10]">TM0x_IRQHandler</a> from mg32x02z__irqhandler.o(.text.TM0x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[11]">TM10_IRQHandler</a> from mg32x02z__irqhandler.o(.text.TM10_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[12]">TM1x_IRQHandler</a> from mg32x02z__irqhandler.o(.text.TM1x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[13]">TM20_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[14]">TM2x_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[15]">TM3x_IRQHandler</a> from mg32x02z__irqhandler.o(.text.TM3x_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[16]">URT0_IRQHandler</a> from mg32x02z__irqhandler.o(.text.URT0_IRQHandler) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[17]">URT123_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[18]">URT4x_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[1d]">USB_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[6]">WWDT_IRQHandler</a> from startup_mg32x02z.o(.text) referenced from startup_mg32x02z.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mg32x02z.o(.text)
 <LI><a href="#[23]">fputc</a> from fputc.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[1f]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[26]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[84]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[85]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[86]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[87]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[88]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>MG32x02z_IEC60730_MANAGER</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ReInitial_Stack</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>APX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2Cx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPIx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SYS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TM20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TM2x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>URT123_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>URT4x_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mg32x02z.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlocksLeft
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Config
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
</UL>

<P><STRONG><a name="[29]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[8e]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[90]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>AddKey</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, keys.o(.text.AddKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AddKey &rArr; CheckTruth &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTruth
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_GetPageNumberOfByte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyRAMInIAP
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyIAPInRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
</UL>

<P><STRONG><a name="[51]"></a>CSC_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[50]"></a>CSC_GetClockSourceState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_GetClockSourceState))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[4f]"></a>CSC_IHRCO_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_csc_drv.o(.text.CSC_IHRCO_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[36]"></a>CSC_Init</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, mg32x02z_csc_init.o(.text.CSC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CSC_Init &rArr; CSC_XOSC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_XOSC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[37]"></a>CSC_XOSC_Enable</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, mg32x02z_csc_init.o(.text.CSC_XOSC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CSC_XOSC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_Init
</UL>

<P><STRONG><a name="[30]"></a>CheckTruth</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, keys.o(.text.CheckTruth))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CheckTruth &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveKey
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
</UL>

<P><STRONG><a name="[39]"></a>ChipInit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, mg32x02z_chipinit.o(.text.ChipInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ChipInit &rArr; CSC_Init &rArr; CSC_XOSC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RST_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>DS1990A_GetID</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, keys.o(.text.DS1990A_GetID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DS1990A_GetID &rArr; OneWire_Write &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
</UL>

<P><STRONG><a name="[45]"></a>Do_CRC</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crc.o(.text.Do_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnReply
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetID
</UL>

<P><STRONG><a name="[46]"></a>FillFlash</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, keys.o(.text.FillFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FillFlash &rArr; IAP_CopyRAMInIAP &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyRAMInIAP
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>GPIO_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_gpio_init.o(.text.GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[56]"></a>GPIO_PinMode_Select</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mg32x02z_gpio_drv.o(.text.GPIO_PinMode_Select))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
</UL>

<P><STRONG><a name="[47]"></a>GetBlocksLeft</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, flash.o(.text.GetBlocksLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetBlocksLeft &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_GetIAPSize
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
</UL>

<P><STRONG><a name="[67]"></a>GetCurEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, skud.o(.text.GetCurEvent))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
</UL>

<P><STRONG><a name="[22]"></a>HardFault_Handler_C</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, system_mg32x02z.o(.text.HardFault_Handler_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HardFault_Handler_C &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[35]"></a>IAP_CopyIAPInRAM</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, iap.o(.text.IAP_CopyIAPInRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IAP_CopyIAPInRAM &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveKey
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
</UL>

<P><STRONG><a name="[34]"></a>IAP_CopyRAMInIAP</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, iap.o(.text.IAP_CopyRAMInIAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IAP_CopyRAMInIAP &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Multiple_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveKey
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFlash
</UL>

<P><STRONG><a name="[33]"></a>IAP_Erase_OnePage</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, iap.o(.text.IAP_Erase_OnePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_Erase_OnePage &rArr; IAP_Erase_Page
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_Page
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_GetIAPSize
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveKey
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
</UL>

<P><STRONG><a name="[4c]"></a>IAP_Erase_Page</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, iap.o(.text.IAP_Erase_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IAP_Erase_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
</UL>

<P><STRONG><a name="[32]"></a>IAP_GetPageNumberOfByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iap.o(.text.IAP_GetPageNumberOfByte))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveKey
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
</UL>

<P><STRONG><a name="[4d]"></a>IAP_Init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iap.o(.text.IAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IAP_Init &rArr; MEM_SetIAPSize
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_IHRCO_Cmd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_GetClockSourceState
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>IAP_Multiple_Write</STRONG> (Thumb, 208 bytes, Stack size 28 bytes, iap.o(.text.IAP_Multiple_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IAP_Multiple_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyRAMInIAP
</UL>

<P><STRONG><a name="[38]"></a>IAP_ReadByte</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap.o(.text.IAP_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_GetIAPSize
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveKey
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTruth
</UL>

<P><STRONG><a name="[31]"></a>IAP_ReadWord</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, iap.o(.text.IAP_ReadWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_GetIAPSize
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTruth
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyIAPInRAM
</UL>

<P><STRONG><a name="[80]"></a>IWDT_Cmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
</UL>

<P><STRONG><a name="[7f]"></a>IWDT_Divider_Select</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_iwdt_drv.o(.text.IWDT_Divider_Select))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
</UL>

<P><STRONG><a name="[61]"></a>IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z__common_drv.o(.text.IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[54]"></a>MEM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_mem_drv.o(.text.MEM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
</UL>

<P><STRONG><a name="[55]"></a>MEM_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mg32x02z_mem_drv.o(.text.MEM_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
</UL>

<P><STRONG><a name="[48]"></a>MEM_GetIAPSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_mem_drv.o(.text.MEM_GetIAPSize))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlocksLeft
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadByte
</UL>

<P><STRONG><a name="[53]"></a>MEM_SetIAPSize</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mg32x02z_mem_drv.o(.text.MEM_SetIAPSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MEM_SetIAPSize
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_GetIAPSize
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_GetFlagStatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mg32x02z__irqhandler.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>OneWire_Read</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, onewire.o(.text.OneWire_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OneWire_Read &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetID
</UL>

<P><STRONG><a name="[41]"></a>OneWire_Start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, onewire.o(.text.OneWire_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OneWire_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetID
</UL>

<P><STRONG><a name="[43]"></a>OneWire_Write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, onewire.o(.text.OneWire_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OneWire_Write &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinMode_Select
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetID
</UL>

<P><STRONG><a name="[58]"></a>PRSM3AddNewByte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, prsm3.o(.text.PRSM3AddNewByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PRSM3AddNewByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_GetRXData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Rx_Callback
</UL>

<P><STRONG><a name="[5b]"></a>PRSM3ReceiveLineComplete</STRONG> (Thumb, 392 bytes, Stack size 16 bytes, prsm3.o(.text.PRSM3ReceiveLineComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PRSM3ReceiveLineComplete &rArr; RemoveKey &rArr; CheckTruth &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnReply
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveKey
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadWord
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBlocksLeft
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddKey
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM01_Callback
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mg32x02z__irqhandler.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>ProtectModuleReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z__common_drv.o(.text.ProtectModuleReg))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
</UL>

<P><STRONG><a name="[3a]"></a>RST_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mg32x02z_rst_init.o(.text.RST_Init))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[5c]"></a>RemoveKey</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, keys.o(.text.RemoveKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RemoveKey &rArr; CheckTruth &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTruth
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_GetPageNumberOfByte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Erase_OnePage
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ReadByte
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyRAMInIAP
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_CopyIAPInRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
</UL>

<P><STRONG><a name="[5d]"></a>ReturnReply</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, prsm3.o(.text.ReturnReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReturnReply &rArr; wdt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IsTxEndTransmission
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do_CRC
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mg32x02z__irqhandler.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mg32x02z__irqhandler.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system_mg32x02z.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>TIM01_Callback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, timers.o(.text.TIM01_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM01_Callback &rArr; PRSM3ReceiveLineComplete &rArr; RemoveKey &rArr; CheckTruth &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM01_IRQ
</UL>

<P><STRONG><a name="[63]"></a>TIM10_Callback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timers.o(.text.TIM10_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM10_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQ
</UL>

<P><STRONG><a name="[65]"></a>TIM16_Callback</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, timers.o(.text.TIM16_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM16_Callback &rArr; DS1990A_GetID &rArr; OneWire_Write &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetID
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckTruth
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IRQ
</UL>

<P><STRONG><a name="[66]"></a>TIM36_Callback</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, timers.o(.text.TIM36_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIM36_Callback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurEvent
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM36_IRQ
</UL>

<P><STRONG><a name="[69]"></a>TM01_IRQ</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timers_irq.o(.text.TM01_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TM01_IRQ &rArr; TIM01_Callback &rArr; PRSM3ReceiveLineComplete &rArr; RemoveKey &rArr; CheckTruth &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM01_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM0x_IRQHandler
</UL>

<P><STRONG><a name="[10]"></a>TM0x_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mg32x02z__irqhandler.o(.text.TM0x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TM0x_IRQHandler &rArr; TM01_IRQ &rArr; TIM01_Callback &rArr; PRSM3ReceiveLineComplete &rArr; RemoveKey &rArr; CheckTruth &rArr; IAP_ReadWord
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM01_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TM10_IRQ</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, timers_irq.o(.text.TM10_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM10_IRQ &rArr; TIM10_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>TM10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mg32x02z__irqhandler.o(.text.TM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TM10_IRQHandler &rArr; TM10_IRQ &rArr; TIM10_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TM16_IRQ</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timers_irq.o(.text.TM16_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TM16_IRQ &rArr; TIM16_Callback &rArr; DS1990A_GetID &rArr; OneWire_Write &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1x_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>TM1x_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mg32x02z__irqhandler.o(.text.TM1x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1x_IRQHandler &rArr; TM16_IRQ &rArr; TIM16_Callback &rArr; DS1990A_GetID &rArr; OneWire_Write &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>TM36_IRQ</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, timers_irq.o(.text.TM36_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TM36_IRQ &rArr; TIM36_Callback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM3x_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>TM3x_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mg32x02z__irqhandler.o(.text.TM3x_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TM3x_IRQHandler &rArr; TM36_IRQ &rArr; TIM36_Callback &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM36_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TM_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM36_IRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IRQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQ
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM01_IRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_one_ms
</UL>

<P><STRONG><a name="[6a]"></a>TM_GetSingleFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_GetSingleFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM36_IRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM16_IRQ
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM10_IRQ
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM01_IRQ
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_one_ms
</UL>

<P><STRONG><a name="[7b]"></a>TM_ITEA_Cmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_ITEA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>TM_IT_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_IT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>TM_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, mg32x02z_tm_init.o(.text.TM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[5a]"></a>TM_Timer_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mg32x02z_tm_drv.o(.text.TM_Timer_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3AddNewByte
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_one_ms
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM36_Callback
</UL>

<P><STRONG><a name="[6f]"></a>URT0_IRQ</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, usart_irq.o(.text.URT0_IRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = URT0_IRQ &rArr; URT_Rx_Callback &rArr; PRSM3AddNewByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Rx_Callback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Tx_Callback
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_GetITStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_GetITAllFlagStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ClearITFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>URT0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mg32x02z__irqhandler.o(.text.URT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = URT0_IRQHandler &rArr; URT0_IRQ &rArr; URT_Rx_Callback &rArr; PRSM3AddNewByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mg32x02z.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>URT_ClearITFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_ClearITFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQ
</UL>

<P><STRONG><a name="[7c]"></a>URT_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>URT_Config</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, mg32x02z_urt_init.o(.text.URT_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = URT_Config &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Init
</UL>

<P><STRONG><a name="[70]"></a>URT_GetITAllFlagStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_GetITAllFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQ
</UL>

<P><STRONG><a name="[71]"></a>URT_GetITStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQ
</UL>

<P><STRONG><a name="[59]"></a>URT_GetRXData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_GetRXData))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3AddNewByte
</UL>

<P><STRONG><a name="[7e]"></a>URT_ITEA_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_ITEA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>URT_IT_Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_IT_Config))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>URT_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mg32x02z_urt_init.o(.text.URT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = URT_Init &rArr; URT_Config &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[60]"></a>URT_IsTxEndTransmission</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.URT_IsTxEndTransmission))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnReply
</UL>

<P><STRONG><a name="[76]"></a>URT_IsTxReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usart.o(.text.URT_IsTxReady))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
</UL>

<P><STRONG><a name="[73]"></a>URT_Rx_Callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart.o(.text.URT_Rx_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = URT_Rx_Callback &rArr; PRSM3AddNewByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3AddNewByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQ
</UL>

<P><STRONG><a name="[77]"></a>URT_SetTXData</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, mg32x02z_urt_drv.o(.text.URT_SetTXData))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Write
</UL>

<P><STRONG><a name="[74]"></a>URT_Tx_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart_irq.o(.text.URT_Tx_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT0_IRQ
</UL>

<P><STRONG><a name="[5f]"></a>URT_Write</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usart.o(.text.URT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = URT_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_SetTXData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IsTxReady
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnReply
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_Callback
</UL>

<P><STRONG><a name="[4e]"></a>UnProtectModuleReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mg32x02z__common_drv.o(.text.UnProtectModuleReg))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_enable
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEM_SetIAPSize
</UL>

<P><STRONG><a name="[64]"></a>clearBuffer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, prsm3.o(.text.clearBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM10_Callback
</UL>

<P><STRONG><a name="[42]"></a>delay_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms &rArr; delay_one_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_one_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRSM3ReceiveLineComplete
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1990A_GetID
</UL>

<P><STRONG><a name="[78]"></a>delay_one_ms</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timers.o(.text.delay_one_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_one_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_GetSingleFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[79]"></a>delay_one_us</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text.delay_one_us))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[57]"></a>delay_us</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timers.o(.text.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_one_us
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Write
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Start
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OneWire_Read
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = main &rArr; FillFlash &rArr; IAP_CopyRAMInIAP &rArr; IAP_Multiple_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_IT_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_ITEA_Cmd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;URT_Cmd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_Timer_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_IT_Config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ITEA_Cmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM_ClearFlag
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillFlash
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5e]"></a>wdt_enable</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wdt.o(.text.wdt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wdt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnProtectModuleReg
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtectModuleReg
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Divider_Select
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReturnReply
</UL>

<P><STRONG><a name="[81]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[92]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[4a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler_C
</UL>

<P><STRONG><a name="[93]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[94]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[95]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[23]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mg32x02z_chipinit.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[3f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mg32x02z_chipinit.o(.text.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipInit
</UL>

<P><STRONG><a name="[82]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
